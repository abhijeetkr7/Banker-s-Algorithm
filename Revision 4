int i = 0;
int j = 0;
pthread_mutex_t mutex; //mutex lock to lock global variables
int initResourceVector [NUMBER_OF_RESOURCES];

//available, max, allocation, need
int available [NUMBER_OF_RESOURCES];
int allocation [NUMBER_OF_CUSTOMERS][NUMBER_OF_RESOURCES] = {{1,1,0},{1,3,0},{0,0,2},{0,1,1},{0,2,0}};
int max [NUMBER_OF_CUSTOMERS][NUMBER_OF_RESOURCES] = {{5,5,5},{3,3,6},{3,5,3},{7,1,4},{7,2,2}};
int need [NUMBER_OF_CUSTOMERS][NUMBER_OF_RESOURCES];

int requestResource(int processID,int request[]);
int releaseResource(int processID,int releaseVector[]);
int ifGreaterThanNeed(int processID,int request[]);
int ifEnoughToRelease(int processID,int releaseVector[]);
int ifInSafeMode();
int ifEnoughToAlloc();
void printNeed();
void printAllocation();
void printAvailable();
void printReqOrRelVector(int vec[]);
void *customer(void* customerID);
